# Generated by Django 2.0.1 on 2018-03-23 18:13

import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_born', models.DateField(blank=True, null=True)),
                ('date_died', models.DateField(blank=True, null=True, verbose_name='Died')),
            ],
        ),
        migrations.CreateModel(
            name='DocType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Document type name', max_length=50)),
                ('fields', models.CharField(blank=True, help_text='Fields labels separated with semicolon. Max: 5', max_length=1000)),
                ('max_days', models.IntegerField(help_text='Maximum days for loan in regular case', null=True)),
                ('max_days_bestseller', models.IntegerField(help_text='Maximum days for loan if document is bestseller', null=True)),
                ('max_days_privileges', models.IntegerField(help_text='Maximum days for loan for privileged patrons', null=True)),
            ],
            options={
                'verbose_name': 'Document Type',
                'verbose_name_plural': "Documents' Types",
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(help_text='Enter a description of the document', max_length=1000)),
                ('last_quantity', models.IntegerField(help_text='This field is used for storing quantity after recalculation. DO NOT USE IT, use quantity() instead!', null=True)),
                ('bestseller', models.BooleanField(default=False)),
                ('quantity_synced', models.BooleanField(default=False)),
                ('is_reference', models.BooleanField(default=False, help_text='Reference materials can not be borrowed.')),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, verbose_name='image')),
                ('authors', models.ManyToManyField(help_text='Select authors', to='library.Author')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique document ID', primary_key=True, serialize=False)),
                ('due_back', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('a', 'Available'), ('g', 'Given out'), ('r', 'Reserved'), ('m', 'Maintenance')], default='d', max_length=1)),
                ('price', models.FloatField(help_text='Price in RUB', null=True)),
                ('additional_field1', models.CharField(blank=True, max_length=500)),
                ('additional_field2', models.CharField(blank=True, max_length=500)),
                ('additional_field3', models.CharField(blank=True, max_length=500)),
                ('additional_field4', models.CharField(blank=True, max_length=500)),
                ('additional_field5', models.CharField(blank=True, max_length=500)),
                ('document', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='library.Document')),
                ('holder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['due_back'],
            },
        ),
        migrations.CreateModel(
            name='DocumentRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.Document')),
            ],
        ),
        migrations.CreateModel(
            name='GiveOut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.Document')),
                ('document_instance', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.DocumentInstance')),
            ],
            options={
                'ordering': ('document_instance__due_back',),
            },
        ),
        migrations.CreateModel(
            name='GiveOutLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_given_out', models.DateTimeField()),
                ('timestamp_due_back', models.DateTimeField()),
                ('timestamp_returned', models.DateTimeField(auto_now=True)),
                ('patron_information', models.CharField(max_length=200)),
                ('document_instance_summary', models.CharField(max_length=200)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LibraryLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room', models.IntegerField(help_text='Room in library', null=True)),
                ('level', models.IntegerField(help_text='Level in library', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatronInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=200)),
                ('telegram', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': "Patron's Information",
                'verbose_name_plural': "Patrons' Information",
            },
        ),
        migrations.CreateModel(
            name='PatronType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('max_renew_times', models.IntegerField(help_text='Maximum number of renewals allowed', null=True)),
                ('max_documents', models.IntegerField(help_text='Maximum number of documents giveouts allowed', null=True)),
                ('privileges', models.BooleanField(default=False)),
                ('priority', models.IntegerField(help_text='Priority in queue', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('executed', models.BooleanField(default=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.Document')),
                ('document_copy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.DocumentInstance')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='patroninfo',
            name='patron_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.PatronType'),
        ),
        migrations.AddField(
            model_name='patroninfo',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='giveout',
            name='patron',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.PatronInfo'),
        ),
        migrations.AddField(
            model_name='giveout',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documentrequest',
            name='patron',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.PatronInfo'),
        ),
        migrations.AddField(
            model_name='documentrequest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documentinstance',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.LibraryLocation'),
        ),
        migrations.AddField(
            model_name='document',
            name='tags',
            field=models.ManyToManyField(help_text='Select tags', to='library.Tag'),
        ),
        migrations.AddField(
            model_name='document',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.DocType'),
        ),
    ]
